"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/progress-stream";
exports.ids = ["vendor-chunks/progress-stream"];
exports.modules = {

/***/ "(ssr)/./node_modules/progress-stream/index.js":
/*!***********************************************!*\
  !*** ./node_modules/progress-stream/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar through = __webpack_require__(/*! through2 */ \"(ssr)/./node_modules/through2/through2.js\");\nvar speedometer = __webpack_require__(/*! speedometer */ \"(ssr)/./node_modules/speedometer/index.js\");\nmodule.exports = function(options, onprogress) {\n    if (typeof options === \"function\") return module.exports(null, options);\n    options = options || {};\n    var length = options.length || 0;\n    var time = options.time || 0;\n    var drain = options.drain || false;\n    var transferred = options.transferred || 0;\n    var nextUpdate = Date.now() + time;\n    var delta = 0;\n    var speed = speedometer(options.speed || 5000);\n    var startTime = Date.now();\n    var update = {\n        percentage: 0,\n        transferred: transferred,\n        length: length,\n        remaining: length,\n        eta: 0,\n        runtime: 0\n    };\n    var emit = function(ended) {\n        update.delta = delta;\n        update.percentage = ended ? 100 : length ? transferred / length * 100 : 0;\n        update.speed = speed(delta);\n        update.eta = Math.round(update.remaining / update.speed);\n        update.runtime = parseInt((Date.now() - startTime) / 1000);\n        nextUpdate = Date.now() + time;\n        delta = 0;\n        tr.emit(\"progress\", update);\n    };\n    var write = function(chunk, enc, callback) {\n        var len = options.objectMode ? 1 : chunk.length;\n        transferred += len;\n        delta += len;\n        update.transferred = transferred;\n        update.remaining = length >= transferred ? length - transferred : 0;\n        if (Date.now() >= nextUpdate) emit(false);\n        callback(null, chunk);\n    };\n    var end = function(callback) {\n        emit(true);\n        callback();\n    };\n    var tr = through(options.objectMode ? {\n        objectMode: true,\n        highWaterMark: 16\n    } : {}, write, end);\n    var onlength = function(newLength) {\n        length = newLength;\n        update.length = length;\n        update.remaining = length - update.transferred;\n        tr.emit(\"length\", length);\n    };\n    // Expose `onlength()` handler as `setLength()` to support custom use cases where length\n    // is not known until after a few chunks have already been pumped, or is\n    // calculated on the fly.\n    tr.setLength = onlength;\n    tr.on(\"pipe\", function(stream) {\n        if (typeof length === \"number\") return;\n        // Support http module\n        if (stream.readable && !stream.writable && stream.headers) {\n            return onlength(parseInt(stream.headers[\"content-length\"] || 0));\n        }\n        // Support streams with a length property\n        if (typeof stream.length === \"number\") {\n            return onlength(stream.length);\n        }\n        // Support request module\n        stream.on(\"response\", function(res) {\n            if (!res || !res.headers) return;\n            if (res.headers[\"content-encoding\"] === \"gzip\") return;\n            if (res.headers[\"content-length\"]) {\n                return onlength(parseInt(res.headers[\"content-length\"]));\n            }\n        });\n    });\n    if (drain) tr.resume();\n    if (onprogress) tr.on(\"progress\", onprogress);\n    tr.progress = function() {\n        update.speed = speed(0);\n        update.eta = Math.round(update.remaining / update.speed);\n        return update;\n    };\n    return tr;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvZ3Jlc3Mtc3RyZWFtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN0QixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQztBQUUxQkUsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLE9BQU8sRUFBRUMsVUFBVTtJQUM1QyxJQUFJLE9BQU9ELFlBQVksWUFBWSxPQUFPRixPQUFPQyxPQUFPLENBQUMsTUFBTUM7SUFDL0RBLFVBQVVBLFdBQVcsQ0FBQztJQUV0QixJQUFJRSxTQUFTRixRQUFRRSxNQUFNLElBQUk7SUFDL0IsSUFBSUMsT0FBT0gsUUFBUUcsSUFBSSxJQUFJO0lBQzNCLElBQUlDLFFBQVFKLFFBQVFJLEtBQUssSUFBSTtJQUM3QixJQUFJQyxjQUFjTCxRQUFRSyxXQUFXLElBQUk7SUFDekMsSUFBSUMsYUFBYUMsS0FBS0MsR0FBRyxLQUFHTDtJQUM1QixJQUFJTSxRQUFRO0lBQ1osSUFBSUMsUUFBUWIsWUFBWUcsUUFBUVUsS0FBSyxJQUFJO0lBQ3pDLElBQUlDLFlBQVlKLEtBQUtDLEdBQUc7SUFFeEIsSUFBSUksU0FBUztRQUNaQyxZQUFZO1FBQ1pSLGFBQWFBO1FBQ2JILFFBQVFBO1FBQ1JZLFdBQVdaO1FBQ1hhLEtBQUs7UUFDTEMsU0FBUztJQUNWO0lBRUEsSUFBSUMsT0FBTyxTQUFTQyxLQUFLO1FBQ3hCTixPQUFPSCxLQUFLLEdBQUdBO1FBQ2ZHLE9BQU9DLFVBQVUsR0FBR0ssUUFBUSxNQUFPaEIsU0FBU0csY0FBWUgsU0FBTyxNQUFNO1FBQ3JFVSxPQUFPRixLQUFLLEdBQUdBLE1BQU1EO1FBQ3JCRyxPQUFPRyxHQUFHLEdBQUdJLEtBQUtDLEtBQUssQ0FBQ1IsT0FBT0UsU0FBUyxHQUFHRixPQUFPRixLQUFLO1FBQ3ZERSxPQUFPSSxPQUFPLEdBQUdLLFNBQVMsQ0FBQ2QsS0FBS0MsR0FBRyxLQUFLRyxTQUFRLElBQUc7UUFDbkRMLGFBQWFDLEtBQUtDLEdBQUcsS0FBR0w7UUFFeEJNLFFBQVE7UUFFUmEsR0FBR0wsSUFBSSxDQUFDLFlBQVlMO0lBQ3JCO0lBQ0EsSUFBSVcsUUFBUSxTQUFTQyxLQUFLLEVBQUVDLEdBQUcsRUFBRUMsUUFBUTtRQUN4QyxJQUFJQyxNQUFNM0IsUUFBUTRCLFVBQVUsR0FBRyxJQUFJSixNQUFNdEIsTUFBTTtRQUMvQ0csZUFBZXNCO1FBQ2ZsQixTQUFTa0I7UUFDVGYsT0FBT1AsV0FBVyxHQUFHQTtRQUNyQk8sT0FBT0UsU0FBUyxHQUFHWixVQUFVRyxjQUFjSCxTQUFTRyxjQUFjO1FBRWxFLElBQUlFLEtBQUtDLEdBQUcsTUFBTUYsWUFBWVcsS0FBSztRQUNuQ1MsU0FBUyxNQUFNRjtJQUNoQjtJQUNBLElBQUlLLE1BQU0sU0FBU0gsUUFBUTtRQUMxQlQsS0FBSztRQUNMUztJQUNEO0lBRUEsSUFBSUosS0FBSzNCLFFBQVFLLFFBQVE0QixVQUFVLEdBQUc7UUFBQ0EsWUFBVztRQUFNRSxlQUFjO0lBQUUsSUFBSSxDQUFDLEdBQUdQLE9BQU9NO0lBQ3ZGLElBQUlFLFdBQVcsU0FBU0MsU0FBUztRQUNoQzlCLFNBQVM4QjtRQUNUcEIsT0FBT1YsTUFBTSxHQUFHQTtRQUNoQlUsT0FBT0UsU0FBUyxHQUFHWixTQUFTVSxPQUFPUCxXQUFXO1FBQzlDaUIsR0FBR0wsSUFBSSxDQUFDLFVBQVVmO0lBQ25CO0lBRUEsd0ZBQXdGO0lBQ3hGLHdFQUF3RTtJQUN4RSx5QkFBeUI7SUFDekJvQixHQUFHVyxTQUFTLEdBQUdGO0lBRWZULEdBQUdZLEVBQUUsQ0FBQyxRQUFRLFNBQVNDLE1BQU07UUFDNUIsSUFBSSxPQUFPakMsV0FBVyxVQUFVO1FBQ2hDLHNCQUFzQjtRQUN0QixJQUFJaUMsT0FBT0MsUUFBUSxJQUFJLENBQUNELE9BQU9FLFFBQVEsSUFBSUYsT0FBT0csT0FBTyxFQUFFO1lBQzFELE9BQU9QLFNBQVNWLFNBQVNjLE9BQU9HLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSTtRQUM5RDtRQUVBLHlDQUF5QztRQUN6QyxJQUFJLE9BQU9ILE9BQU9qQyxNQUFNLEtBQUssVUFBVTtZQUN0QyxPQUFPNkIsU0FBU0ksT0FBT2pDLE1BQU07UUFDOUI7UUFFQSx5QkFBeUI7UUFDekJpQyxPQUFPRCxFQUFFLENBQUMsWUFBWSxTQUFTSyxHQUFHO1lBQ2pDLElBQUksQ0FBQ0EsT0FBTyxDQUFDQSxJQUFJRCxPQUFPLEVBQUU7WUFDMUIsSUFBSUMsSUFBSUQsT0FBTyxDQUFDLG1CQUFtQixLQUFLLFFBQVE7WUFDaEQsSUFBSUMsSUFBSUQsT0FBTyxDQUFDLGlCQUFpQixFQUFFO2dCQUNsQyxPQUFPUCxTQUFTVixTQUFTa0IsSUFBSUQsT0FBTyxDQUFDLGlCQUFpQjtZQUN2RDtRQUNEO0lBQ0Q7SUFFQSxJQUFJbEMsT0FBT2tCLEdBQUdrQixNQUFNO0lBQ3BCLElBQUl2QyxZQUFZcUIsR0FBR1ksRUFBRSxDQUFDLFlBQVlqQztJQUVsQ3FCLEdBQUdtQixRQUFRLEdBQUc7UUFDYjdCLE9BQU9GLEtBQUssR0FBR0EsTUFBTTtRQUNyQkUsT0FBT0csR0FBRyxHQUFHSSxLQUFLQyxLQUFLLENBQUNSLE9BQU9FLFNBQVMsR0FBR0YsT0FBT0YsS0FBSztRQUV2RCxPQUFPRTtJQUNSO0lBQ0EsT0FBT1U7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL25peGtpdGEvLi9ub2RlX21vZHVsZXMvcHJvZ3Jlc3Mtc3RyZWFtL2luZGV4LmpzPzNjNDYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRocm91Z2ggPSByZXF1aXJlKCd0aHJvdWdoMicpO1xudmFyIHNwZWVkb21ldGVyID0gcmVxdWlyZSgnc3BlZWRvbWV0ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zLCBvbnByb2dyZXNzKSB7XG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG1vZHVsZS5leHBvcnRzKG51bGwsIG9wdGlvbnMpO1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHR2YXIgbGVuZ3RoID0gb3B0aW9ucy5sZW5ndGggfHwgMDtcblx0dmFyIHRpbWUgPSBvcHRpb25zLnRpbWUgfHwgMDtcblx0dmFyIGRyYWluID0gb3B0aW9ucy5kcmFpbiB8fCBmYWxzZTtcblx0dmFyIHRyYW5zZmVycmVkID0gb3B0aW9ucy50cmFuc2ZlcnJlZCB8fCAwO1xuXHR2YXIgbmV4dFVwZGF0ZSA9IERhdGUubm93KCkrdGltZTtcblx0dmFyIGRlbHRhID0gMDtcblx0dmFyIHNwZWVkID0gc3BlZWRvbWV0ZXIob3B0aW9ucy5zcGVlZCB8fCA1MDAwKTtcblx0dmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cblx0dmFyIHVwZGF0ZSA9IHtcblx0XHRwZXJjZW50YWdlOiAwLFxuXHRcdHRyYW5zZmVycmVkOiB0cmFuc2ZlcnJlZCxcblx0XHRsZW5ndGg6IGxlbmd0aCxcblx0XHRyZW1haW5pbmc6IGxlbmd0aCxcblx0XHRldGE6IDAsXG5cdFx0cnVudGltZTogMFxuXHR9O1xuXG5cdHZhciBlbWl0ID0gZnVuY3Rpb24oZW5kZWQpIHtcblx0XHR1cGRhdGUuZGVsdGEgPSBkZWx0YTtcblx0XHR1cGRhdGUucGVyY2VudGFnZSA9IGVuZGVkID8gMTAwIDogKGxlbmd0aCA/IHRyYW5zZmVycmVkL2xlbmd0aCoxMDAgOiAwKTtcblx0XHR1cGRhdGUuc3BlZWQgPSBzcGVlZChkZWx0YSk7XG5cdFx0dXBkYXRlLmV0YSA9IE1hdGgucm91bmQodXBkYXRlLnJlbWFpbmluZyAvIHVwZGF0ZS5zcGVlZCk7XG5cdFx0dXBkYXRlLnJ1bnRpbWUgPSBwYXJzZUludCgoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSkvMTAwMCk7XG5cdFx0bmV4dFVwZGF0ZSA9IERhdGUubm93KCkrdGltZTtcblxuXHRcdGRlbHRhID0gMDtcblxuXHRcdHRyLmVtaXQoJ3Byb2dyZXNzJywgdXBkYXRlKTtcblx0fTtcblx0dmFyIHdyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuYywgY2FsbGJhY2spIHtcblx0XHR2YXIgbGVuID0gb3B0aW9ucy5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblx0XHR0cmFuc2ZlcnJlZCArPSBsZW47XG5cdFx0ZGVsdGEgKz0gbGVuO1xuXHRcdHVwZGF0ZS50cmFuc2ZlcnJlZCA9IHRyYW5zZmVycmVkO1xuXHRcdHVwZGF0ZS5yZW1haW5pbmcgPSBsZW5ndGggPj0gdHJhbnNmZXJyZWQgPyBsZW5ndGggLSB0cmFuc2ZlcnJlZCA6IDA7XG5cblx0XHRpZiAoRGF0ZS5ub3coKSA+PSBuZXh0VXBkYXRlKSBlbWl0KGZhbHNlKTtcblx0XHRjYWxsYmFjayhudWxsLCBjaHVuayk7XG5cdH07XG5cdHZhciBlbmQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdGVtaXQodHJ1ZSk7XG5cdFx0Y2FsbGJhY2soKTtcblx0fTtcblxuXHR2YXIgdHIgPSB0aHJvdWdoKG9wdGlvbnMub2JqZWN0TW9kZSA/IHtvYmplY3RNb2RlOnRydWUsIGhpZ2hXYXRlck1hcms6MTZ9IDoge30sIHdyaXRlLCBlbmQpO1xuXHR2YXIgb25sZW5ndGggPSBmdW5jdGlvbihuZXdMZW5ndGgpIHtcblx0XHRsZW5ndGggPSBuZXdMZW5ndGg7XG5cdFx0dXBkYXRlLmxlbmd0aCA9IGxlbmd0aDtcblx0XHR1cGRhdGUucmVtYWluaW5nID0gbGVuZ3RoIC0gdXBkYXRlLnRyYW5zZmVycmVkO1xuXHRcdHRyLmVtaXQoJ2xlbmd0aCcsIGxlbmd0aCk7XG5cdH07XG5cdFxuXHQvLyBFeHBvc2UgYG9ubGVuZ3RoKClgIGhhbmRsZXIgYXMgYHNldExlbmd0aCgpYCB0byBzdXBwb3J0IGN1c3RvbSB1c2UgY2FzZXMgd2hlcmUgbGVuZ3RoXG5cdC8vIGlzIG5vdCBrbm93biB1bnRpbCBhZnRlciBhIGZldyBjaHVua3MgaGF2ZSBhbHJlYWR5IGJlZW4gcHVtcGVkLCBvciBpc1xuXHQvLyBjYWxjdWxhdGVkIG9uIHRoZSBmbHkuXG5cdHRyLnNldExlbmd0aCA9IG9ubGVuZ3RoO1xuXHRcblx0dHIub24oJ3BpcGUnLCBmdW5jdGlvbihzdHJlYW0pIHtcblx0XHRpZiAodHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicpIHJldHVybjtcblx0XHQvLyBTdXBwb3J0IGh0dHAgbW9kdWxlXG5cdFx0aWYgKHN0cmVhbS5yZWFkYWJsZSAmJiAhc3RyZWFtLndyaXRhYmxlICYmIHN0cmVhbS5oZWFkZXJzKSB7XG5cdFx0XHRyZXR1cm4gb25sZW5ndGgocGFyc2VJbnQoc3RyZWFtLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10gfHwgMCkpO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQgc3RyZWFtcyB3aXRoIGEgbGVuZ3RoIHByb3BlcnR5XG5cdFx0aWYgKHR5cGVvZiBzdHJlYW0ubGVuZ3RoID09PSAnbnVtYmVyJykge1xuXHRcdFx0cmV0dXJuIG9ubGVuZ3RoKHN0cmVhbS5sZW5ndGgpO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQgcmVxdWVzdCBtb2R1bGVcblx0XHRzdHJlYW0ub24oJ3Jlc3BvbnNlJywgZnVuY3Rpb24ocmVzKSB7XG5cdFx0XHRpZiAoIXJlcyB8fCAhcmVzLmhlYWRlcnMpIHJldHVybjtcblx0XHRcdGlmIChyZXMuaGVhZGVyc1snY29udGVudC1lbmNvZGluZyddID09PSAnZ3ppcCcpIHJldHVybjtcblx0XHRcdGlmIChyZXMuaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSkge1xuXHRcdFx0XHRyZXR1cm4gb25sZW5ndGgocGFyc2VJbnQocmVzLmhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ10pKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG5cblx0aWYgKGRyYWluKSB0ci5yZXN1bWUoKTtcblx0aWYgKG9ucHJvZ3Jlc3MpIHRyLm9uKCdwcm9ncmVzcycsIG9ucHJvZ3Jlc3MpO1xuXG5cdHRyLnByb2dyZXNzID0gZnVuY3Rpb24oKSB7XG5cdFx0dXBkYXRlLnNwZWVkID0gc3BlZWQoMCk7XG5cdFx0dXBkYXRlLmV0YSA9IE1hdGgucm91bmQodXBkYXRlLnJlbWFpbmluZyAvIHVwZGF0ZS5zcGVlZCk7XG5cblx0XHRyZXR1cm4gdXBkYXRlO1xuXHR9O1xuXHRyZXR1cm4gdHI7XG59O1xuIl0sIm5hbWVzIjpbInRocm91Z2giLCJyZXF1aXJlIiwic3BlZWRvbWV0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsIm9ucHJvZ3Jlc3MiLCJsZW5ndGgiLCJ0aW1lIiwiZHJhaW4iLCJ0cmFuc2ZlcnJlZCIsIm5leHRVcGRhdGUiLCJEYXRlIiwibm93IiwiZGVsdGEiLCJzcGVlZCIsInN0YXJ0VGltZSIsInVwZGF0ZSIsInBlcmNlbnRhZ2UiLCJyZW1haW5pbmciLCJldGEiLCJydW50aW1lIiwiZW1pdCIsImVuZGVkIiwiTWF0aCIsInJvdW5kIiwicGFyc2VJbnQiLCJ0ciIsIndyaXRlIiwiY2h1bmsiLCJlbmMiLCJjYWxsYmFjayIsImxlbiIsIm9iamVjdE1vZGUiLCJlbmQiLCJoaWdoV2F0ZXJNYXJrIiwib25sZW5ndGgiLCJuZXdMZW5ndGgiLCJzZXRMZW5ndGgiLCJvbiIsInN0cmVhbSIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJoZWFkZXJzIiwicmVzIiwicmVzdW1lIiwicHJvZ3Jlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/progress-stream/index.js\n");

/***/ })

};
;