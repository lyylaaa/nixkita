"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/into-stream";
exports.ids = ["vendor-chunks/into-stream"];
exports.modules = {

/***/ "(ssr)/./node_modules/into-stream/index.js":
/*!*******************************************!*\
  !*** ./node_modules/into-stream/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst from = __webpack_require__(/*! from2 */ \"(ssr)/./node_modules/from2/index.js\");\nconst pIsPromise = __webpack_require__(/*! p-is-promise */ \"(ssr)/./node_modules/p-is-promise/index.js\");\nconst intoStream = (input)=>{\n    if (Array.isArray(input)) {\n        input = input.slice();\n    }\n    let promise;\n    let iterator;\n    let asyncIterator;\n    prepare(input);\n    function prepare(value) {\n        input = value;\n        if (input instanceof ArrayBuffer || ArrayBuffer.isView(input) && !Buffer.isBuffer(input)) {\n            input = Buffer.from(input);\n        }\n        promise = pIsPromise(input) ? input : null;\n        // We don't iterate on strings and buffers since slicing them is ~7x faster\n        const shouldIterate = !promise && input[Symbol.iterator] && typeof input !== \"string\" && !Buffer.isBuffer(input);\n        iterator = shouldIterate ? input[Symbol.iterator]() : null;\n        const shouldAsyncIterate = !promise && input[Symbol.asyncIterator];\n        asyncIterator = shouldAsyncIterate ? input[Symbol.asyncIterator]() : null;\n    }\n    return from(function reader(size, callback) {\n        if (promise) {\n            (async ()=>{\n                try {\n                    await prepare(await promise);\n                    reader.call(this, size, callback);\n                } catch (error) {\n                    callback(error);\n                }\n            })();\n            return;\n        }\n        if (iterator) {\n            const object = iterator.next();\n            setImmediate(callback, null, object.done ? null : object.value);\n            return;\n        }\n        if (asyncIterator) {\n            (async ()=>{\n                try {\n                    const object = await asyncIterator.next();\n                    setImmediate(callback, null, object.done ? null : object.value);\n                } catch (error) {\n                    setImmediate(callback, error);\n                }\n            })();\n            return;\n        }\n        if (input.length === 0) {\n            setImmediate(callback, null, null);\n            return;\n        }\n        const chunk = input.slice(0, size);\n        input = input.slice(size);\n        setImmediate(callback, null, chunk);\n    });\n};\nmodule.exports = intoStream;\nmodule.exports.object = (input)=>{\n    if (Array.isArray(input)) {\n        input = input.slice();\n    }\n    let promise;\n    let iterator;\n    let asyncIterator;\n    prepare(input);\n    function prepare(value) {\n        input = value;\n        promise = pIsPromise(input) ? input : null;\n        iterator = !promise && input[Symbol.iterator] ? input[Symbol.iterator]() : null;\n        asyncIterator = !promise && input[Symbol.asyncIterator] ? input[Symbol.asyncIterator]() : null;\n    }\n    return from.obj(function reader(size, callback) {\n        if (promise) {\n            (async ()=>{\n                try {\n                    await prepare(await promise);\n                    reader.call(this, size, callback);\n                } catch (error) {\n                    callback(error);\n                }\n            })();\n            return;\n        }\n        if (iterator) {\n            const object = iterator.next();\n            setImmediate(callback, null, object.done ? null : object.value);\n            return;\n        }\n        if (asyncIterator) {\n            (async ()=>{\n                try {\n                    const object = await asyncIterator.next();\n                    setImmediate(callback, null, object.done ? null : object.value);\n                } catch (error) {\n                    setImmediate(callback, error);\n                }\n            })();\n            return;\n        }\n        this.push(input);\n        setImmediate(callback, null, null);\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/into-stream/index.js\n");

/***/ })

};
;